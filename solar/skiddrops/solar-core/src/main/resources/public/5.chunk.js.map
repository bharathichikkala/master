{"version":3,"sources":["webpack:///./src/app/+auth/+otp/otp.component.ts","webpack:///./src/app/+auth/+otp/otp-routing.module.ts","webpack:///./src/app/+auth/+otp/otp.component.html","webpack:///./src/app/+auth/+otp/otp.module.ts"],"names":[],"mappings":"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","file":"5.chunk.js","sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { AuthService } from '../auth.service';\n\nimport { FormsModule, FormBuilder, FormGroup, Validators, FormControl, AbstractControl, FormArray } from '@angular/forms';\n\nimport { AlertNotificationService } from '../../shared/utils/notification.service';\n@Component({\n  selector: 'app-otp',\n  templateUrl: './otp.component.html',\n  styles: []\n})\nexport class OtpComponent implements OnInit {\n  userRegisterModel = new UserOTPModel('', '');\n  public errorMessage: string;\n  public submitted: boolean;\n\n  public complexForm: FormGroup;\n  public otp: AbstractControl;\n  public password: AbstractControl;\n  public retypePassword: AbstractControl;\n  loading = false;\n  public forgotPasswordMessage: string;\n\n  constructor(private alertNotificationService: AlertNotificationService,\n    private route: ActivatedRoute, private router: Router, private authService: AuthService, private fb: FormBuilder) {\n\n    this.complexForm = fb.group({\n      otp: [null, Validators.compose([Validators.required, Validators.pattern('^[0-9]{6,6}$')])],\n      password: [null, Validators.compose([Validators.required,\n      Validators.pattern('^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*[~!@#$%^&+=]).{6,32}$')])],\n      retypePassword: ['', Validators.required]\n    }, { validator: this.MatchPassword })\n    this.otp = this.complexForm.controls['otp'];\n    this.password = this.complexForm.controls['password'];\n    this.retypePassword = this.complexForm.controls['retypePassword'];\n  }\n  MatchPassword(control: FormControl) {\n    const password = control.get('password').value; // to get value in input tag\n    const confirmPassword = control.get('retypePassword').value;\n    // to get value in input tag\n    if (confirmPassword != null) {\n      if (password !== confirmPassword) {\n        control.get('retypePassword').setErrors({ MatchPassword: true })\n      } else {\n        return null\n      }\n    }\n  }\n\n\n  ngOnInit() {\n    this.route.params.subscribe(params => {\n      if (params.data !== undefined) {\n        if (params.data === 'Success') {\n          this.forgotPasswordMessage = 'OTP has been sent to the registered Mobile Number/Email';\n        }\n      }\n    })\n  }\n\n  register(event) {\n    this.submitted = true;\n    this.loading = true;\n    this.authService.userOTP(event.otp, event.password).subscribe(\n      data => {\n\n        if (data.data != null) {\n          this.errorMessage = '';\n          localStorage.setItem('userRole', data.data.roles[0].name);\n          //  localStorage.setItem('currentUser', data.data.email);\n          localStorage.setItem('Authentication', btoa(data.data.email + ':' + event.password))\n          //  this.router.navigate(['/login'])\n          this.loading = false;\n          // this.notificationAlert('Now you can Login with valid Credentilas');\n          this.router.navigate(['/login', { data: 'Success' }])\n\n        } else {\n          this.loading = false;\n          this.errorMessage = data.error.message;\n          console.log(data.error.message)\n        }\n\n\n      },\n      error => {\n        this.loading = false;\n        this.errorMessage = 'Enter  OTP and Password';\n      });\n\n\n    // if (event.otp == '123') {\n    //    this.errorMessage=''\n    //   this.router.navigate(['/login'])\n    // }else if(event.otp != '123' && event.otp != ''){\n    //    this.errorMessage='Invalid OTP'\n    // }\n    // else if(event.otp == ''){\n    //    this.errorMessage='Enter  OTP and Password';\n    // }\n\n  }\n\n  notificationAlert(a) {\n    this.alertNotificationService.smallBox({\n      // title: 'James Simmons liked your comment',\n      content: a,\n      color: '#296191',\n      // iconSmall: '',\n      timeout: 4000\n    });\n  }\n}\nexport class UserOTPModel {\n  constructor(\n\n    public password: string,\n    public otp: string\n  ) { }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/+auth/+otp/otp.component.ts","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport {OtpComponent} from \"./otp.component\";\n\nconst routes: Routes = [{\n  path: '',\n  component: OtpComponent\n}];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n  providers: []\n})\nexport class OtpRoutingModule { }\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/+auth/+otp/otp-routing.module.ts","module.exports = \"<header id=\\\"header\\\" class=\\\"animated fadeInDown\\\">\\n\\n  <p class=\\\"logoBox\\\">\\n    <img alt=\\\"Solar\\\" class=\\\"logoImage\\\" src=\\\"assets/img/solar.png\\\">\\n    <span class=\\\"logoName\\\">Solar</span>\\n  </p>\\n\\n\\n\\n</header>\\n<div id=\\\"main\\\" role=\\\"main\\\" class=\\\"animated fadeInDown\\\">\\n\\n  <!-- MAIN CONTENT -->\\n  <div id=\\\"content\\\" class=\\\"container\\\">\\n\\n    <div class=\\\"row\\\">\\n\\n\\n      <div class=\\\"col-md-6 col-md-offset-2 \\\">\\n        <!--<div class=\\\"col-xs-12 col-sm-12 col-md-5 col-lg-5\\\">-->\\n        <div class=\\\"well no-padding\\\">\\n\\n          <form [formGroup]=\\\"complexForm\\\" method=\\\"post\\\" *ngIf=\\\"userRegisterModel\\\" class=\\\"smart-form client-form\\\">\\n            <header>\\n              User Registration Confirmation with OTP\\n            </header>\\n            <fieldset>\\n\\n              <section *ngIf=\\\"errorMessage\\\" class=\\\"icon-color-bad text-center\\\"> {{errorMessage}} </section>\\n              <section *ngIf=\\\"forgotPasswordMessage\\\" class=\\\"text-success text-center\\\">{{forgotPasswordMessage}}</section>\\n              <section>\\n                <label class=\\\"label\\\" for=\\\"otp\\\" [ngClass]=\\\"{'has-error':! this.otp.valid &&  this.otp}\\\">OTP</label>\\n\\n                <div class=\\\"form-group form-control  input\\\">\\n                  <label class=\\\"input\\\">\\n                    <i class=\\\"icon-append fa fa-user\\\"></i>\\n                    <input type=\\\"text\\\" name=\\\"otp\\\" [formControl]=\\\"this.otp\\\" [(ngModel)]=\\\"userRegisterModel.otp\\\" placeholder=\\\"OTP\\\" />\\n\\n                    <span *ngIf=\\\" this.otp.hasError('required') &&submitted  \\\" class=\\\" icon-color-bad \\\">Please enter otp</span>\\n\\n                    <span *ngIf=\\\" this.otp.hasError('pattern') \\\" class=\\\" icon-color-bad \\\">Please enter only 6 numeric characters for OTP</span>\\n\\n                  </label>\\n                </div>\\n              </section>\\n              <br />\\n\\n              <section>\\n                <label class=\\\"label\\\" for=\\\"password\\\" [ngClass]=\\\"{'has-error':! this.password.valid &&  this.password}\\\">Password</label>\\n\\n                <div class=\\\"form-group form-control  input\\\">\\n                  <label class=\\\"input\\\">\\n                    <i class=\\\"icon-append fa fa-lock\\\"></i>\\n                    <input type=\\\"password\\\" name=\\\"password\\\" [formControl]=\\\"this.password\\\" [(ngModel)]=\\\"userRegisterModel.password\\\" placeholder=\\\"Password\\\"\\n                    />\\n\\n                    <span *ngIf=\\\" this.password.hasError('pattern') \\\" class=\\\" icon-color-bad \\\">Please enter atleast one number, one small letter, one capital letter and one special character for password</span>\\n                    <span *ngIf=\\\" this.password.hasError('required')  && submitted\\\" class=\\\" icon-color-bad \\\">Please enter password</span>\\n                  </label>\\n                </div>\\n              </section>\\n              <br />\\n              <br />\\n              <section>\\n                <label class=\\\"label\\\" for=\\\"retypePassword\\\" [ngClass]=\\\"{'has-error':! this.retypePassword.valid &&  this.retypePassword}\\\">Confirm Password</label>\\n\\n                <div class=\\\"form-group form-control  input\\\">\\n                  <label class=\\\"input\\\">\\n                    <i class=\\\"icon-append fa fa-lock\\\"></i>\\n                    <input type=\\\"password\\\" name=\\\"retypePassword\\\" [formControl]=\\\"this.retypePassword\\\" [(ngModel)]=\\\"userRegisterModel.reTypepassword\\\"\\n                      placeholder=\\\"Password\\\" />\\n\\n                    <!-- <span *ngIf=\\\" this.password.hasError('pattern') \\\" class=\\\" icon-color-bad \\\">Please Enter atleast one number, one small letter, one capital letter and one special character for password</span> -->\\n                    <!--<span class=\\\" icon-color-bad \\\" *ngIf=\\\"complexForm.controls.retypePassword.errors?.MatchPassword \\\">Password not match.</span>-->\\n\\n                    <span class=\\\" icon-color-bad \\\" *ngIf=\\\" (userRegisterModel.reTypepassword) && (userRegisterModel.password != userRegisterModel.reTypepassword) \\\">Password miss match</span>\\n                    <span *ngIf=\\\" this.retypePassword.hasError('required')  && submitted\\\" class=\\\" icon-color-bad \\\">Please Enter Re-Type Password</span>\\n                  </label>\\n                </div>\\n              </section>\\n\\n            </fieldset>\\n            <br>\\n\\n\\n            <div class=\\\"row show-grid\\\">\\n              <div class=\\\"col-xs-1 \\\"> </div>\\n              <div class=\\\"col-xs-4 \\\">\\n                <span class=\\\"hidden-mobile hiddex-xs\\\">Already registered?</span>\\n                <a routerLink=\\\"/login\\\">\\n                  <u>Sign In</u>\\n                </a>\\n              </div>\\n            </div>\\n            <br>\\n\\n            <footer>\\n              <button (click)=\\\"register(userRegisterModel)\\\" [disabled]=\\\"!complexForm.valid\\\" class=\\\"btn btn-primary\\\">\\n                Confirm\\n                <i class=\\\"fa fa-cog fa-spin\\\" *ngIf=\\\"loading\\\"></i>\\n                <span *ngIf=\\\"loading\\\">loading...</span>\\n              </button>\\n            </footer>\\n          </form>\\n\\n\\n\\n        </div>\\n      </div>\\n    </div>\\n  </div>\\n\\n</div>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/+auth/+otp/otp.component.html\n// module id = 1309\n// module chunks = 5","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { OtpRoutingModule } from './otp-routing.module';\nimport { OtpComponent } from './otp.component';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OtpRoutingModule, FormsModule, ReactiveFormsModule\n  ],\n  declarations: [OtpComponent]\n})\nexport class OtpModule { }\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/+auth/+otp/otp.module.ts"],"sourceRoot":""}