{"version":3,"sources":["webpack:///./src/app/+dispatch/+dispatch-manifest/dispatch-manifest.component.html","webpack:///./src/app/+dispatch/+dispatch-manifest/dispatch-manifest.component.ts","webpack:///./src/app/+dispatch/+dispatch-manifest/dispatch-manifest.module.ts"],"names":[],"mappings":"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","file":"dispatch-manifest-dispatch-manifest-module.js","sourcesContent":["module.exports = \"<div class=\\\"main-content\\\">\\n    <div class=\\\"container-fluid\\\">\\n        <div class=\\\"row\\\">\\n            <div class=\\\"col-md-8\\\">\\n                <div class=\\\"card\\\">\\n                    <div class=\\\"card-header card-header-info\\\">\\n                        <h4 class=\\\"card-title\\\" style=\\\"text-align:center\\\">Dispatch Product</h4>\\n                    </div>\\n                    <div class=\\\"card-body\\\">\\n                        <form [formGroup]=\\\"dispatchForm\\\" method=\\\"post\\\" method=\\\"post\\\">\\n                            <div class=\\\"row\\\">\\n                                <div class=\\\"col-md-6\\\">\\n                                    <mat-form-field class=\\\"example-full-width\\\">\\n                                        <input matInput placeholder=\\\"QR Code\\\" name=\\\"barcode\\\" [(ngModel)]=\\\"productData.barcode\\\"\\n                                            type=\\\"text\\\" readonly [ngModelOptions]=\\\"{standalone: true}\\\">\\n                                    </mat-form-field>\\n                                </div>\\n                                <div class=\\\"col-md-6\\\">\\n                                    <mat-form-field class=\\\"example-full-width\\\">\\n                                        <input matInput placeholder=\\\"SKU Code\\\" type=\\\"text\\\" name=\\\"skucode\\\" [(ngModel)]=\\\"productData.inventoryId.skuCode\\\"\\n                                            readonly [ngModelOptions]=\\\"{standalone: true}\\\">\\n                                    </mat-form-field>\\n                                </div>\\n                            </div>\\n                            <div class=\\\"row\\\">\\n                                <div class=\\\"col-md-12\\\">\\n                                    <mat-form-field class=\\\"example-full-width\\\">\\n                                        <input matInput placeholder=\\\"Product Name\\\" type=\\\"text\\\" name=\\\"productName\\\"\\n                                            [(ngModel)]=\\\"productData.inventoryId.productName\\\" readonly [ngModelOptions]=\\\"{standalone: true}\\\">\\n                                    </mat-form-field>\\n                                </div>\\n                            </div>\\n\\n                            <div class=\\\"row\\\">\\n                                <div class=\\\"col-md-12\\\">\\n                                    <mat-form-field class=\\\"example-full-width\\\">\\n                                        <input matInput placeholder=\\\"Facility\\\" type=\\\"text\\\" name=\\\"facility\\\" [(ngModel)]=\\\"productData.facilityId.facility\\\"\\n                                            readonly [ngModelOptions]=\\\"{standalone: true}\\\">\\n                                    </mat-form-field>\\n                                </div>\\n                            </div>\\n\\n                            <!-- <div class=\\\"row\\\">\\n                                <div class=\\\"col-md-12\\\">\\n                                    <mat-form-field>\\n                                        <label>Invoice Id *</label>\\n                                        <mat-select matInput name=\\\"mySelect\\\" [formControl]=\\\"this.invoice\\\" [(ngModel)]=\\\"productData.invoiceId\\\" >\\n                                            <mat-option selected=\\\"true\\\" [disabled]=\\\"true\\\" value=\\\"null\\\">Please select SKU code\\n                                            </mat-option>\\n                                            <mat-option *ngFor=\\\"let item of inVoiceDetails \\\" [value]=item>{{item}}</mat-option>\\n                                        </mat-select>\\n        \\n        \\n                                    </mat-form-field>\\n                                    <span *ngIf=\\\"this.invoice.hasError('required') &&formValidate \\\" class=\\\" text-danger \\\">Please\\n                                        enter Invoice Id</span>\\n                                </div>\\n                            </div> -->\\n\\n                            <div class=\\\"row\\\">\\n                                <div class=\\\"col-sm-10 col-10\\\">\\n                                    <mat-form-field class=\\\"example-full-width\\\">\\n                                        <input matInput type=\\\"text\\\" name=\\\"invoiceId\\\" [formControl]=\\\"this.invoice\\\"\\n                                            [(ngModel)]=\\\"productData.invoiceId\\\">\\n                                        <mat-placeholder class=\\\"placeholder\\\">Invoice Id *</mat-placeholder>\\n                                    </mat-form-field>\\n\\n                                    <span *ngIf=\\\"this.invoice.hasError('required') &&formValidate \\\" class=\\\"text-danger \\\">Please\\n                                        enter Invoice Id</span>\\n                                    <span *ngIf=\\\"this.invoice.hasError('maxlength')\\\" class=\\\"text-danger\\\">Please\\n                                        enter 30 letters only</span>\\n                                </div>\\n                                <div class=\\\"col-sm-2 col-2\\\" (click)=\\\"getInvoiceBybarcode()\\\" style=\\\"margin: auto\\\"><img\\n                                        src=\\\"assets/img/qr-code.png\\\">\\n                                </div>\\n                            </div>\\n                            <div *ngIf=\\\"checkList.length>0\\\">\\n                                <div class=\\\"row\\\">\\n                                    <div class=\\\"col-sm-6 col-xs-12\\\" formArrayName=\\\"items\\\" *ngFor=\\\"let item of dispatchForm.get('items').controls ; let i = index;\\\">\\n                                        <div class=\\\"row\\\" [formGroupName]=\\\"i\\\">\\n                                            <mat-checkbox class=\\\"primary col-sm-6 col-xs-12\\\" formControlName=\\\"conditionCheck\\\"\\n                                                name=\\\"checkbox\\\" value=\\\"{{dispatchForm.controls.items.controls[i].controls.conditionCheck.value}}\\\"\\n                                                (ngModelChange)=\\\"onChange(i)\\\">\\n                                                <input matInput type=\\\"number\\\" [attr.disabled]=\\\"dispatchForm.controls.items.controls[i].controls.conditionCheck.value ? null :true\\\"\\n                                                    [value]=\\\"dispatchForm.controls.items.controls[i].controls.conditionCheck.value ?  \\n                                            dispatchForm.controls.items.controls[i].controls.quantity.value : 0\\\"\\n                                                    formControlName=\\\"quantity\\\" style=\\\"border:1px solid #AAAAAA;text-align:center;width:31px\\\">\\n                                                {{dispatchForm.controls.items.controls[i].controls.accessory.value}}\\n                                            </mat-checkbox>\\n\\n                                            <div *ngIf=\\\"dispatchForm.controls.items.controls[i].controls.conditionCheck.value\\\">\\n                                                <span *ngIf=\\\"item.get('quantity').hasError('required') && formValidate \\\"\\n                                                    class=\\\" text-danger\\\">Please enter quantity</span>\\n                                                <span *ngIf=\\\"item.get('quantity').hasError('pattern') \\\" class=\\\" text-danger\\\">\\n                                                    Please enter only 1-10 numbers</span>\\n                                            </div>\\n\\n                                        </div>\\n                                    </div>\\n                                </div>\\n                            </div>\\n                            <div class=\\\"row\\\">\\n                                <div class=\\\"col-md-12\\\">\\n                                    <mat-form-field class=\\\"example-full-width\\\">\\n                                        <textarea matInput [(ngModel)]=\\\"productData.comment\\\" [formControl]=\\\"this.comment\\\"></textarea>\\n                                        <mat-placeholder class=\\\"placeholder\\\">Please enter some comments *</mat-placeholder>\\n\\n                                    </mat-form-field>\\n                                    <span *ngIf=\\\"this.comment.hasError('required') &&formValidate \\\" class=\\\"text-danger \\\">Please\\n                                        enter comments</span>\\n                                    <span *ngIf=\\\"this.comment.hasError('maxlength')\\\" class=\\\"text-danger\\\">Please\\n                                        enter only 200 letters only</span>\\n                                </div>\\n                            </div>\\n                            <button mat-raised-button type=\\\"submit\\\" class=\\\"btn btn-success pull-right\\\" (click)=\\\"doDispatch()\\\">Submit<i\\n                                   *ngIf=\\\"loaderBtn\\\"></i>\\n                            </button>\\n                            <button mat-raised-button type=\\\"submit\\\" class=\\\"btn btn-danger pull-right\\\" (click)=\\\"gotoPreviousPage()\\\">Cancel</button>\\n                            <div class=\\\"clearfix\\\"></div>\\n                        </form>\\n                        <div>\\n                            <div *ngIf=\\\"loaderBtn\\\">\\n\\n                                <div class=\\\"ui-overlay-c\\\">\\n                                    <div class=\\\"loading\\\" style=\\\" margin: 0;\\n                                    position: absolute;\\n                                    top: 50%;\\n                                    left: 50%;\\n                                    transform: translate(-50%, -50%);\\\">\\n                                        <div class=\\\"loading-bar\\\"></div>\\n                                        <div class=\\\"loading-bar\\\"></div>\\n                                        <div class=\\\"loading-bar\\\"></div>\\n                                        <div class=\\\"loading-bar\\\"></div>\\n                                        <h4 style=\\\"color: #e0dcd4\\\">Loading....</h4>\\n                                    </div>\\n                                </div>\\n\\n                            </div>\\n                        </div>\\n                    </div>\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n</div>\"","import { Component, OnInit, Input } from '@angular/core';\nimport { AppService } from '../../app.service';\nimport { QRCodeScanner } from '../../+qrcode-scanner/qrcode-scanner.service';\nimport { ActivatedRoute, Params, Router } from '@angular/router';\nimport { FormGroup, FormControl, FormArray, AbstractControl, FormBuilder, Validators } from '@angular/forms';\n\nimport { MatDialog } from '@angular/material';\n\n@Component({\n    selector: 'dispatch-manifest',\n    templateUrl: 'dispatch-manifest.component.html',\n    styles: [\n        `\n        .ui-overlay-c {\n            background-color: rgba(0, 0, 0, 0.5);\n            position: fixed;\n            width: 100%;\n            height: 100%;\n            top: 0;\n            left: 0;\n            text-align: center;\n        }\n        .loading {\n          position: absolute;\n          top: 50%;\n          left: 50%;\n        }\n        .loading-bar {\n         \n          display: inline-block;\n          width: 4px;\n          height: 18px;\n          border-radius: 4px;\n          animation: loading 1s ease-in-out infinite;\n        }\n        .loading-bar:nth-child(1) {\n          background-color: #3498db;\n          animation-delay: 0;\n        }\n        .loading-bar:nth-child(2) {\n          background-color: #c0392b;\n          animation-delay: 0.09s;\n        }\n        .loading-bar:nth-child(3) {\n          background-color: #f1c40f;\n          animation-delay: .18s;\n        }\n        .loading-bar:nth-child(4) {\n          background-color: #27ae60;\n          animation-delay: .27s;\n        }\n        \n        @keyframes loading {\n          0% {\n            transform: scale(1);\n          }\n          20% {\n            transform: scale(1, 2.2);\n          }\n          40% {\n            transform: scale(1);\n          }\n        }\n        md-checkbox .md-icon {\n    background: red;\n}\nmd-checkbox.md-default-theme.md-checked .md-icon {\n    background: orange;\n}\n.mat-focused .placeholder {    \n    color: #AAAAAA;\n    }\n  .placeholder {\n     color:#AAAAAA;\n    }\n        \n        `\n    ]\n})\n\nexport class DispatchManifestComponent implements OnInit {\n\n    items: FormArray;\n    quantity: AbstractControl\n\n\n    constructor(\n        public dialog: MatDialog,\n        private readonly _appService: AppService,\n        private readonly _qrScanner: QRCodeScanner,\n        private readonly router: Router,\n        private readonly route: ActivatedRoute,\n        private readonly fb: FormBuilder\n    ) {\n\n    }\n    public formValidate = false;\n    public dispatchForm: FormGroup;\n    public invoice: AbstractControl;\n    public comment: AbstractControl;\n    data() {\n        this.dispatchForm = this.fb.group({\n            INVOICE: [null, [Validators.required, Validators.maxLength(30)]],\n            COMMENT: [null, [Validators.required, Validators.maxLength(200)]],\n\n            items: this.fb.array([this.createItem()])\n        })\n\n        if (this.checkList.length > 0) {\n            this.items = this.dispatchForm.get('items') as FormArray;\n            this.addItem();\n            this.dispatchForm.controls[\"items\"].setValue(this.checkList);\n        }\n        this.invoice = this.dispatchForm.controls['INVOICE'];\n        this.comment = this.dispatchForm.controls['COMMENT'];\n\n    }\n    facility:any;\n    ngOnInit() {\n\n        /**  * Back Button event trigger\n                */\n        history.pushState(null, null, location.href);\n        window.onpopstate = function (event) {\n            history.go(1);\n        };\n        this.facility = JSON.parse(localStorage.getItem('facility'));\n\n        this.dispatchForm = this.fb.group({\n            INVOICE: [null, [Validators.required, Validators.maxLength(30)]],\n            COMMENT: [null, [Validators.required, Validators.maxLength(200)]]\n        })\n        this.invoice = this.dispatchForm.controls['INVOICE'];\n        this.comment = this.dispatchForm.controls['COMMENT'];\n\n        this.getDetailsByQrcodeId(localStorage.getItem('QRCode'));\n    }\n    inVoiceDetails = [];\n    getInvoiceId() {\n        this._appService.getAllInvoices().subscribe((data: any) => {\n            if (data.data != null) {\n                this.inVoiceDetails = data.data\n            }\n        })\n    }\n\n    public productData: any = {\n        inventoryId: {},\n        facilityId: {}\n\n    };\n    checkListObj: any = {\n        checkListArray: []\n    }\n    checkList: any = []\n    getDetailsByQrcodeId(id) {\n        this._appService.checkingBarcode(id,this.facility.id).subscribe((data: any) => {\n            if (data.data != null) {\n                this.productData = data.data;\n                this.checkListObj.inventoryItemId = {\n                    id: data.data.id\n                }\n                this._appService.getCheckListBySKu(data.data.inventoryId.skuCode).subscribe((data: any) => {\n                    if (data.data != null) {\n                        this.checkList = data.data;\n                        if (this.checkList.length > 0) {\n                            this.data()\n                        }\n                    }\n                })\n            } else {\n                this.openDialog(data.error.message)\n            }\n        })\n    }\n\n\n\n\n    createItem():FormGroup {\n        if (this.checkList.length > 0) {\n            return this.fb.group({\n                quantity: [null, Validators.compose([Validators.required, Validators.pattern('^(?:[1-9]|0[1-9]|10)$')])],\n                id: '',\n                accessory: '',\n                skuCode: '',\n                conditionCheck: ''\n            });\n        }\n        else{\n            return this.fb.group({})\n        }\n\n    }\n    addItem() {\n        for (let i = 0; i < this.checkList.length - 1; i++) {\n            this.items.push(this.createItem());\n        }\n    }\n\n    onChange(value) {\n        const controlArray: any = this.dispatchForm.get('items') as FormArray;\n\n        for (let i = 0; i < this.checkList.length; i++) {\n            if (i === value) {\n                controlArray.controls[i].get('quantity').setValue(1);\n            }\n\n        }\n\n\n    }\n\n    resultQrcode;\n    getInvoiceBybarcode() {\n        this._qrScanner.promiseScan().then(result => {\n            this.resultQrcode = result;\n            if (!this.resultQrcode.cancelled) {\n                this.productData.invoiceId = this.resultQrcode.text\n            }\n        });\n    }\n\n    loaderBtn = false;\n    doDispatch() {\n\n        if (this.dispatchForm.valid) {\n            this.loaderBtn = true;\n            this.checkList = this.dispatchForm.value;\n            this.serviceIntegration()\n\n        }\n        else {\n            this.loaderBtn = false;\n            this.formValidate = true\n        }\n\n    }\n\n    serviceIntegration() {\n        const obj = {\n            \"barcode\": this.productData.barcode,\n            \"invoiceId\": this.productData.invoiceId,\n            \"createdTime\": new Date(),\n            \"comment\": this.productData.comment,\n            \"createdUser\": localStorage.getItem('currentUser')\n        }\n        this.dispatchServiceCall(obj)\n    }\n\n    dispatchServiceCall(obj){\n        this._appService.addDispatch(obj).subscribe((data: any) => {\n            if (data.error == null) {\n                if (this.checkList.items) {\n                    for (const i of this.checkList.items) {\n                        this.checkListObj.checkListArray.push({\n                            \"accessoriesId\": i.id,\n                            \"accessoryCondition\": i.conditionCheck,\n                            \"quantity\": i.conditionCheck ? i.quantity : 0\n                        })\n                    }\n                    this.checklistServiceCall()\n                    \n                } else {\n                    this.loaderBtn = false;\n                    this.openDialog('Invoice generated successfully')\n                }\n            } else {\n                this.loaderBtn = false;\n                this.openDialog(data.error.message);\n            }\n        })\n    }\n\n    checklistServiceCall()\n    {\n        this._appService.addCheckList(this.checkListObj).subscribe((data: any) => {\n            if (data.data != null) {\n                this.loaderBtn = false;\n                this.openDialog('Invoice & Checklist added successfully ')\n            } else {\n                this.loaderBtn = false;\n                this.openDialog(data.error.message)\n            }\n        })\n    }\n\n    openDialog(msgText) {\n        const dialogRef = this.dialog.open(DialogComponent, { disableClose: true });\n        localStorage.setItem('msg', msgText)\n        dialogRef.afterClosed().subscribe(result => {\n            if (result) {\n                this.gotoPreviousPage();\n            }\n        });\n    }\n\n    gotoPreviousPage() {\n        this.router.navigate(['./dispatch']);\n    }\n}\n\n\n\n\n\n@Component({\n    selector: 'dialog-content-example-dialog',\n    template: `<img class=\"mat-typography img1\" src=\"assets/img/logom.png\" alt=\"MedicalBulkBuy\" width=\"90%\"   >\n    <mat-dialog-content class=\"mat-typography\" style=\"border-bottom:1px solid #ddd;border-top:1px solid #ddd; text-align:center\">\n     \n    <h5 style=\"padding: 18px;margin: 0px;font-size: 14px;font-family: sans-serif;\">{{msgText}}</h5>\n    </mat-dialog-content>\n   \n    <mat-dialog-actions align=\"center\" >\n    <button mat-stroked-button [mat-dialog-close]=\"true\" cdkFocusInitial > \n    <mat-icon>done</mat-icon>\n    Ok\n</button>\n    </mat-dialog-actions>\n  `,\n})\nexport class DialogComponent {\n    msgText: any;\n    ngOnInit() {\n        this.msgText = localStorage.getItem('msg');\n    }\n}\n\n\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { Routes, RouterModule } from '@angular/router';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { DispatchManifestComponent, DialogComponent } from './dispatch-manifest.component';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { SharedModule } from '../../shared.module'\n\nimport {\n    MatIconModule,\n    MatButtonModule,\n    MatInputModule,\n    MatRippleModule,\n    MatFormFieldModule,\n    MatTooltipModule,\n    MatSelectModule,\n    MatDialogModule\n} from '@angular/material';\n\nconst routes: Routes = [\n    {\n        path: '',\n        component: DispatchManifestComponent\n    }\n]\n\n\n@NgModule({\n    imports: [\n        MatIconModule,\n        MatCheckboxModule,\n        MatButtonModule,\n        MatRippleModule,\n        MatFormFieldModule,\n        MatInputModule,\n        MatTooltipModule,\n        MatSelectModule,\n        CommonModule,\n        MatDialogModule,\n        SharedModule,\n        [RouterModule.forChild(routes)],\n        FormsModule,\n        ReactiveFormsModule.withConfig({ warnOnNgModelWithFormControl: 'never' }),\n    ],\n    declarations: [DispatchManifestComponent, DialogComponent],\n    providers: [\n\n    ],\n    entryComponents: [DialogComponent]\n})\nexport class DispatchManifestModule { }\n"],"sourceRoot":""}