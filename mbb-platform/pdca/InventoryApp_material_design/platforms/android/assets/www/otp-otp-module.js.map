{"version":3,"sources":["webpack:///./src/app/+auth/+otp/otp-routing.module.ts","webpack:///./src/app/+auth/+otp/otp.component.html","webpack:///./src/app/+auth/+otp/otp.component.ts","webpack:///./src/app/+auth/+otp/otp.module.ts"],"names":[],"mappings":"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","file":"otp-otp-module.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport {OtpComponent} from \"./otp.component\";\n\nconst routes: Routes = [{\n  path: '',\n  component: OtpComponent\n}];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n  providers: []\n})\nexport class OtpRoutingModule { }\n","module.exports = \"<!--<header id=\\\"header\\\" class=\\\"animated fadeInDown\\\">\\n  <div id=\\\"logo-group\\\">\\n    <span id=\\\"logo\\\">\\n  \\n         </span>\\n  </div>\\n</header>-->\\n<!-- <br><br> -->\\n<!-- <div id=\\\"main\\\" role=\\\"main\\\" class=\\\"animated fadeInDown\\\"> -->\\n  <!-- MAIN CONTENT -->\\n  <!-- <div id=\\\"content\\\" class=\\\"container\\\">\\n    <div class=\\\"row\\\">\\n      <div class=\\\"col-md-6 col-md-offset-3 \\\" style=\\\"margin-left:27%\\\">\\n        <div class=\\\"loginui well no-padding\\\">\\n          <form [formGroup]=\\\"complexForm\\\" method=\\\"post\\\" *ngIf=\\\"userRegisterModel\\\" class=\\\"smart-form client-form\\\">\\n            <header class=\\\"header-tag\\\" style=\\\"background-color:white\\\">\\n              <img src=\\\"../../../assets/img/logom.png\\\" alt=\\\"MedicalBulkBuy\\\">\\n              <div class=\\\"app-version\\\">Version 9.0</div>\\n            </header>\\n            <fieldset>\\n              <section *ngIf=\\\"errorMessage\\\" class=\\\"icon-color-bad text-center\\\"> {{errorMessage}} </section>\\n              <section *ngIf=\\\"forgotPasswordMessage\\\" class=\\\"text-success text-center\\\">{{forgotPasswordMessage}}</section>\\n              <section class=\\\"otp-section\\\">\\n                <label class=\\\"label\\\" for=\\\"otp\\\" [ngClass]=\\\"{'has-error':! this.otp.valid &&  this.otp}\\\">OTP</label>\\n\\n                <div class=\\\"form-group form-control  input\\\">\\n                  <label class=\\\"input\\\">\\n                    <i class=\\\"icon-append fa fa-user\\\"></i>\\n                    <input type=\\\"text\\\" name=\\\"otp\\\" [formControl]=\\\"this.otp\\\" [(ngModel)]=\\\"userRegisterModel.otp\\\"\\n                      placeholder=\\\"OTP\\\" />\\n\\n                    <span *ngIf=\\\" this.otp.hasError('required') &&submitted  \\\" class=\\\" icon-color-bad \\\">Please enter\\n                      otp</span>\\n\\n                    <span *ngIf=\\\" this.otp.hasError('pattern') \\\" class=\\\" icon-color-bad \\\">Please enter only 6 numeric\\n                      characters for OTP</span>\\n\\n                  </label>\\n                </div>\\n              </section>\\n\\n\\n              <section class=\\\"otp-section\\\">\\n                <label class=\\\"label\\\" for=\\\"password\\\" [ngClass]=\\\"{'has-error':! this.password.valid &&  this.password}\\\">Password</label>\\n\\n                <div class=\\\"form-group form-control  input\\\">\\n                  <label class=\\\"input\\\">\\n                    <i class=\\\"icon-append fa fa-lock\\\"></i>\\n                    <input type=\\\"password\\\" name=\\\"password\\\" [formControl]=\\\"this.password\\\" [(ngModel)]=\\\"userRegisterModel.password\\\"\\n                      placeholder=\\\"Password\\\" />\\n                    <span *ngIf=\\\" this.password.hasError('required')  && submitted\\\" class=\\\" icon-color-bad \\\">Please\\n                      enter password</span>\\n                  </label>\\n                </div>\\n              </section>\\n\\n\\n              <section class=\\\"otp-section\\\">\\n                <label class=\\\"label\\\" for=\\\"retypePassword\\\" [ngClass]=\\\"{'has-error':! this.retypePassword.valid &&  this.retypePassword}\\\">Confirm\\n                  Password</label>\\n\\n                <div class=\\\"form-group form-control  input\\\">\\n                  <label class=\\\"input\\\">\\n                    <i class=\\\"icon-append fa fa-lock\\\"></i>\\n                    <input type=\\\"password\\\" name=\\\"retypePassword\\\" [formControl]=\\\"this.retypePassword\\\" [(ngModel)]=\\\"userRegisterModel.reTypepassword\\\"\\n                      placeholder=\\\"Confirm Password\\\" />\\n                    <span class=\\\" icon-color-bad \\\" *ngIf=\\\" (userRegisterModel.reTypepassword) && (userRegisterModel.password != userRegisterModel.reTypepassword) \\\">Password\\n                      miss match</span>\\n                    <span *ngIf=\\\" this.retypePassword.hasError('required')  && submitted\\\" class=\\\" icon-color-bad \\\">Please\\n                      Enter Re-Type Password</span>\\n                  </label>\\n                </div>\\n              </section>\\n\\n            </fieldset>\\n            <br>\\n\\n\\n            <div class=\\\"row show-grid\\\">\\n              <div class=\\\"col-xs-1 \\\"> </div>\\n              <div class=\\\"col-xs-4 \\\">\\n                <span class=\\\"hidden-mobile hiddex-xs\\\"><b>Already registered ? </b> </span>\\n                <a routerLink=\\\"/loginUrl\\\">\\n                  <u> <b> Sign In </b></u>\\n                </a>\\n              </div>\\n            </div>\\n            <br>\\n\\n            <footer style=\\\"background-color:white\\\">\\n              <button (click)=\\\"register(userRegisterModel)\\\" [disabled]=\\\"!complexForm.valid\\\" class=\\\"btn btn-primary\\\">\\n                Reset\\n                <i class=\\\"fa fa-cog fa-spin\\\" *ngIf=\\\"loading\\\"></i>\\n                <span *ngIf=\\\"loading\\\">loading...</span>\\n              </button>\\n            </footer>\\n          </form>\\n        </div>\\n      </div>\\n    </div>\\n  </div>\\n\\n</div>\\n -->\\n\\n<div class=\\\"wrapper wrapper-full-page\\\">\\n  <div class=\\\"page-header login-page header-filter\\\" filter-color=\\\"black\\\" style=\\\"background-image: url('assets/img/background.jpg'); background-size: cover; background-position: top center;height: 100%;\\\">\\n    <div class=\\\"container\\\">\\n      <br><br><br><br>\\n      <div class=\\\"row\\\">\\n        <div class=\\\"col-lg-4 col-md-6 col-sm-6 ml-auto mr-auto\\\">\\n          <!--<form [formGroup]=\\\"complexForm\\\" method=\\\"post\\\" *ngIf=\\\"userLogin\\\" class=\\\"smart-form client-form\\\">-->\\n          <form [formGroup]=\\\"complexForm\\\" *ngIf=\\\"userRegisterModel\\\" class=\\\"form ng-untouched ng-pristine ng-valid\\\"\\n            method=\\\"\\\" novalidate=\\\"\\\">\\n            <div class=\\\"card card-login\\\">\\n              <div class=\\\"card-header text-center\\\">\\n                <img src=\\\"assets/img/logom.png\\\" width=\\\"100%\\\"><br/>\\n                <h3 style=\\\"color:#2B55A3;font-weight: bold;\\\">Reset Password</h3>\\n              </div>\\n              <div class=\\\"card-body \\\">\\n                <section *ngIf=\\\"errorMessage\\\" style=\\\"color: red\\\" class=\\\"icon-color-bad text-center\\\"> {{errorMessage}} </section>\\n                <section *ngIf=\\\"forgotPasswordMessage\\\" class=\\\"text-success text-center\\\">{{forgotPasswordMessage}}</section>\\n                <!-- <section class=\\\"otp-section\\\"> -->\\n                <!-- <label class=\\\"label\\\" for=\\\"otp\\\" [ngClass]=\\\"{'has-error':! this.otp.valid &&  this.otp}\\\">OTP</label> -->\\n                <span class=\\\"bmd-form-group\\\">\\n                  <div class=\\\"input-group\\\">\\n                    <!-- <i class=\\\"icon-append fa fa-user\\\"></i> -->\\n                    <input class=\\\"form-control\\\" placeholder=\\\"OTP\\\" name=\\\"otp\\\" type=\\\"number\\\" [formControl]=\\\"this.otp\\\"\\n                      [(ngModel)]=\\\"userRegisterModel.otp\\\" >\\n                      </div>\\n                    <span *ngIf=\\\" this.otp.hasError('required') &&submitted  \\\" style=\\\"color:red\\\" class=\\\" icon-color-bad \\\">Please enter\\n                      otp</span>\\n\\n                    <span *ngIf=\\\" this.otp.hasError('pattern') \\\" style=\\\"color:red\\\" class=\\\" icon-color-bad \\\">Please enter 6 digits OTP</span>\\n                  \\n                </span>\\n                <!-- </section> -->\\n                <br>\\n                <span class=\\\"bmd-form-group\\\">\\n                  <div class=\\\"input-group\\\">\\n                    <input class=\\\"form-control\\\" placeholder=\\\"Password\\\" name=\\\"password\\\" type=\\\"password\\\" [formControl]=\\\"this.password\\\"\\n                      [(ngModel)]=\\\"userRegisterModel.password\\\">\\n                  </div>\\n                  <span *ngIf=\\\" this.password.hasError('required')  && submitted\\\" style=\\\"color:red\\\" class=\\\" icon-color-bad \\\">Please\\n                    enter password</span>\\n                </span>\\n                <br>\\n                <span class=\\\"bmd-form-group\\\">\\n                  <div class=\\\"input-group\\\">\\n                    <input class=\\\"form-control\\\" placeholder=\\\"Confirm Password\\\" type=\\\"password\\\" name=\\\"retypePassword\\\"\\n                      [formControl]=\\\"this.retypePassword\\\" [(ngModel)]=\\\"userRegisterModel.reTypepassword\\\">\\n                  </div>\\n                  <span class=\\\" icon-color-bad \\\" style=\\\"color:red\\\" *ngIf=\\\" (userRegisterModel.reTypepassword) && (userRegisterModel.password != userRegisterModel.reTypepassword) \\\">Password\\n                    miss match</span>\\n                  <span *ngIf=\\\" this.retypePassword.hasError('required')  && submitted\\\" style=\\\"color:red\\\" class=\\\" icon-color-bad \\\">Please\\n                    Enter Re-Type Password</span>\\n                </span>\\n\\n                <br>\\n                <span class=\\\"bmd-form-group\\\">\\n                  <div class=\\\"input-group\\\">\\n                    <span class=\\\"hidden-mobile hiddex-xs\\\"><b>Already registered?</b> </span>\\n                    <a routerLink=\\\"/loginUrl\\\">\\n                      <u><b> Sign In</b></u>\\n                    </a>\\n                  </div>\\n                </span>\\n              </div>\\n              <!-- <br> -->\\n              <!-- <footer style=\\\"background-color:white\\\"> -->\\n              <div class=\\\"card-footer\\\">\\n                <button style=\\\"margin-left: 100px;\\\" (click)=\\\"register(userRegisterModel)\\\" [disabled]=\\\"!complexForm.valid\\\"\\n                  class=\\\"btn btn-primary\\\"><strong *ngIf=\\\"!loading\\\">\\n                  Reset</strong>\\n                  <i class=\\\"fa fa-cog fa-spin\\\" *ngIf=\\\"loading\\\"></i>\\n                  <span *ngIf=\\\"loading\\\"><strong>loading...</strong></span>\\n                </button>\\n              </div>\\n              <!-- </footer> -->\\n              <!-- <span style=\\\"color:red;text-align:center\\\">{{loginErrorMessage}}</span> -->\\n              <!-- <div class=\\\"card-footer justify-content-center\\\"> -->\\n              <!-- <button mat-raised-button color=\\\"primary\\\" (click)=\\\"doLogin()\\\">Login</button> -->\\n              <!-- </div> -->\\n            </div>\\n          </form>\\n        </div>\\n      </div>\\n    </div>\\n    <footer class=\\\"footer \\\">\\n      <div class=\\\"container\\\">\\n\\n\\n      </div>\\n    </footer>\\n  </div>\\n</div>\"","import { Component, OnInit } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { AuthService } from '../../auth.service';\n\nimport { FormsModule, FormBuilder, FormGroup, Validators, FormControl, AbstractControl, FormArray } from '@angular/forms';\n\n@Component({\n  selector: 'app-otp',\n  templateUrl: './otp.component.html',\n  providers: [AuthService],\n  styles: []\n})\nexport class OtpComponent implements OnInit {\n  userRegisterModel = new UserOTPModel('', '');\n  public errorMessage: string;\n  public submitted: boolean;\n\n  public complexForm: FormGroup;\n  public otp: AbstractControl;\n  public password: AbstractControl;\n  public retypePassword: AbstractControl;\n  loading = false;\n  public forgotPasswordMessage: string;\n\n  constructor(\n    //private alertNotificationService: AlertNotificationService,\n    private readonly route: ActivatedRoute, private readonly router: Router, private readonly authService: AuthService, private readonly fb: FormBuilder) {\n\n    this.complexForm = fb.group({\n      otp: [null, Validators.compose([Validators.required, Validators.pattern('^[0-9]{6,6}$')])],\n      password: [null, Validators.required],\n      retypePassword: ['', Validators.required]\n    }, { validator: this.MatchPassword })\n    this.otp = this.complexForm.controls['otp'];\n    this.password = this.complexForm.controls['password'];\n    this.retypePassword = this.complexForm.controls['retypePassword'];\n  }\n  MatchPassword(control: FormControl): FormGroup {\n    const password = control.get('password').value; // to get value in input tag\n    const confirmPassword = control.get('retypePassword').value;\n    // to get value in input tag\n    if (confirmPassword != null) {\n      if (password !== confirmPassword) {\n        control.get('retypePassword').setErrors({ MatchPassword: true })\n      } else {\n        return null\n      }\n    }\n  }\n\n\n  ngOnInit() {\n    this.route.params.subscribe((params: any) => {\n      if (params.data !== undefined) {\n        if (params.data === 'Success') {\n          this.forgotPasswordMessage = 'OTP has been sent to the registered Mobile Number/Email';\n        }\n      }\n    })\n  }\n  passwordResetMessage=\"Password reset successfully. Please Login\"\n  register(event) {\n    this.submitted = true;\n    this.loading = true;\n    this.authService.userOTP(event.otp, event.password).subscribe(\n      (data: any) => {\n\n        if (data.data != null) {\n          this.errorMessage = '';\n          sessionStorage.setItem('userRole', data.data.roles[0].name);\n          sessionStorage.setItem('Authentication', btoa(`${data.data.email}:${event.password}`))\n          //  this.router.navigate(['/login'])\n          this.loading = false;\n          localStorage.setItem(\"reset\",this.passwordResetMessage)\n          this.router.navigate(['/loginUrl'])        \n        } else {\n          this.loading = false;\n          this.errorMessage = data.error.message;\n        }\n\n\n      },\n      error => {\n        this.loading = false;\n        this.errorMessage = 'Enter  OTP and Password';\n      });\n\n\n\n\n  }\n\n  // notificationAlert(a) {\n  //   this.alertNotificationService.smallBox({\n  //     // title: 'James Simmons liked your comment',\n  //     content: a,\n  //     color: '#296191',\n  //     // iconSmall: '',\n  //     timeout: 4000\n  //   });\n  // }\n}\nexport class UserOTPModel {\n  constructor(\n\n    public password: string,\n    public otp: string\n  ) { }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { OtpRoutingModule } from './otp-routing.module';\nimport { OtpComponent } from './otp.component';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OtpRoutingModule, FormsModule, ReactiveFormsModule.withConfig({ warnOnNgModelWithFormControl: 'never' })\n  ],\n  declarations: [OtpComponent]\n})\nexport class OtpModule { }\n"],"sourceRoot":""}